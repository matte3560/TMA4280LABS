CC=gcc
FC=gfortran
CFLAGS=-std=c99 -O3 -MMD
LDLIBS=-lm

# Directories
DIR_COMMON=../common
DIR_TEST=../test
DIR_SERIAL=../serial
DIR_MPI=../mpi
DIR_HYBRID=../hybrid
DIR_ALL=$(DIR_COMMON) $(DIR_TEST) $(DIR_SERIAL) $(DIR_MPI) $(DIR_HYBRID)

# Include directories
VPATH=$(DIR_ALL)
INCLUDE=$(addprefix -I,$(DIR_ALL))
CFLAGS+=$(INCLUDE)
FFLAGS+=$(INCLUDE)

# Object files
COMMON=common_poisson.o fst.o
COMMON_TEST=common_test.o
COMMON_MPI_TEST=$(COMMON_TEST) serial_poisson.o # serial_poisson.o needed to compare with serial implementation
SERIAL_COMMON=serial_poisson.o $(COMMON)
MPI_COMMON=mpi_poisson.o $(COMMON)
HYBRID_COMMON=hybrid_poisson.o $(MPI_COMMON)

# Objects containing right hand side function only
# They all have the same identifier, so you should always link one and only one
RHS_SAMPLE=rhs_sample.o	# Taken from sample code: f(x,y) = 2 * (y - y*y + x - x*x)
RHS_CONST=rhs_const.o	# From Question 1: f(x,y) = 1
RHS_VTEST=rhs_vtest.o	# Right hand side with known exact solution, used for vtest

# Special flags for OpenMP
hybrid_%.o: CFLAGS+=-fopenmp

# Targets
all: serial mpi

utest: serial_utest mpi_idx_utest mpi_utest hybrid_utest

vtest: serial_vtest mpi_vtest hybrid_vtest

serial: serial.o $(SERIAL_COMMON) $(RHS_CONST)

serial_utest: serial_utest.o $(SERIAL_COMMON) $(COMMON_TEST) $(RHS_CONST)

serial_vtest: serial_vtest.o $(SERIAL_COMMON) $(COMMON_TEST) $(RHS_VTEST)

mpi: mpi.o $(MPI_COMMON) $(RHS_CONST)
	mpicc $(LDFLAGS) $^ $(LOADLIBES) $(LDLIBS) -o $@

mpi_utest: mpi_utest.o $(MPI_COMMON) $(COMMON_MPI_TEST) $(RHS_CONST)
	mpicc $(LDFLAGS) $^ $(LOADLIBES) $(LDLIBS) -o $@

mpi_idx_utest: mpi_idx_utest.o $(MPI_COMMON) $(COMMON_MPI_TEST) $(RHS_CONST)
	mpicc $(LDFLAGS) $^ $(LOADLIBES) $(LDLIBS) -o $@

mpi_vtest: mpi_vtest.o $(MPI_COMMON) $(COMMON_MPI_TEST) $(RHS_VTEST)
	mpicc $(LDFLAGS) $^ $(LOADLIBES) $(LDLIBS) -o $@

hybrid: hybrid.o $(HYBRID_COMMON) $(RHS_CONST)
	mpicc $(LDFLAGS) -fopenmp $^ $(LOADLIBES) $(LDLIBS) -o $@

hybrid_vtest: hybrid_vtest.o $(HYBRID_COMMON) $(COMMON_MPI_TEST) $(RHS_VTEST)
	mpicc $(LDFLAGS) -fopenmp $^ $(LOADLIBES) $(LDLIBS) -o $@

hybrid_utest: hybrid_utest.o $(HYBRID_COMMON) $(COMMON_MPI_TEST) $(RHS_CONST)
	mpicc $(LDFLAGS) -fopenmp $^ $(LOADLIBES) $(LDLIBS) -o $@


# Include dependencies autogenerated by GCC (headers, etc.)
-include *.d

.PHONY: clean purge run_utest run_vtest

run_utest: utest
	# Serial poisson
	./serial_utest
	# MPI indexing
	mpirun -n 2 mpi_idx_utest
	mpirun -n 4 mpi_idx_utest
	mpirun -n 16 mpi_idx_utest
	# MPI poisson
	mpirun -n 2 mpi_utest
	mpirun -n 4 mpi_utest
	mpirun -n 16 mpi_utest
	# Hybrid poisson
	mpirun -n 2 hybrid_utest
	mpirun -n 4 hybrid_utest
	mpirun -n 16 hybrid_utest

run_vtest: vtest
	# Serial implementation
	./serial_vtest
	# MPI implementation
	mpirun -n 4 mpi_vtest
	# Hybrid implementation
	mpirun -n 4 hybrid_vtest

clean:
	$(RM) *.o *.d

purge: clean
	$(RM) serial mpi hybrid
	$(RM) *_utest *_vtest
